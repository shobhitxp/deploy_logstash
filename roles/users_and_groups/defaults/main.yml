---

users_and_groups:
  # Groups List
  # groups:
  #   - gid: YYY
  #     name: mygroup
  #     system: yes/no
  groups:
    - name: "{{ pi_remote_user_group }}"

  # Users List
  # users:
  #   - name: my.username
  #     groups:
  #       - wheel
  #       - users
  #     system: yes/no
  #     uid: YYY
  #
  users:
    - name: "{{ pi_remote_user }}"
      groups:
        - "{{ pi_remote_user_group }}"
      #password: "{{ remote_user_pwd }}"
      #ssh_key: "/home/{{ remote_user }}/.ssh/id_rsa.pub"

  # Sudoers
  # sudoers:
  #   - name: ipsum
  #     user: "%ipsum"
  #     runas: "ALL=(ALL)"
  #     commands: "NOPASSWD: ALL"
  sudoers:
    - name: "{{ pi_remote_user }}"
      user: "{{ pi_remote_user }}"
      runas: "ALL=(ALL)"
      commands: "NOPASSWD: ALL"

  # Use this to only allow certain users contextually
  # Note that groups will always be created, but users
  # in groups will only be allowed if they belong to a
  # group in this list
  whitelist_groups: []

  # Directory where authorized SSH public keys are
  # looked for, e.g., /etc/ssh/authorized_keys.
  # Key files must be owned by the corresponding user
  # and only accessible to them.
  # Defaults to $HOME/.ssh, in which case the key file
  # will be named authorized_keys.
  authorized_keys_dir: ~
